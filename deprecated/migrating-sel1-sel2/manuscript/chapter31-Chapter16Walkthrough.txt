#  31 Appendix - Chapter 16 Walkthrough 

This section seemed too detailed to add into the body of the text. 

##  Steps followed to implement WebDriverWait in Chapter 16 

I initially declare WebDriverWait locally in the clickSubMenuItem method and do all the imports. 
    
~~~~~~~~    
    WebDriverWait wait;
    wait = new WebDriverWait(driver, 20); 
    wait.until(weCanSee.GWTTitleMatches(subMenuText));
~~~~~~~~    

Then I'll declare weCanSee locally in the method 
    
~~~~~~~~    
    ExpectedConditionFactory weCanSee;
    weCanSee = new ExpectedConditionFactory();
~~~~~~~~    

I remove the errors by having eclipse create the code, and I add the ExpectedConditionFactory in the pageObjects package. 

Now I just have to add the GWTTitleMatches method 

Eclipse autofix that in 

The GWTTitleMatches is going to return an ExpectedCondition so amend that and I'll cut and paste the selenium.wait for condition so I get the javaScript we want. 
    
~~~~~~~~    
    public ExpectedCondition GWTTitleMatches(String subMenuText) {
    selenium.waitForCondition("document.title.match(/" + 
            subMenuText + "/);", "2000");
    return null;
    }
~~~~~~~~    

Amend this into a basic call to a JavascriptExpectedCondition object 
    
~~~~~~~~    
    public ExpectedCondition GWTTitleMatches(String subMenuText) {
    return new JavascriptExpectedCondition("document.title.match(/" + 
                subMenuText + "/);");
    }
~~~~~~~~    

Now I just fix up all the imports. 

~~~~~~~~
Import ExpectedCondition 
~~~~~~~~

and automatically create class JavascriptExpectedCondition 

which I will add to a waits subfolder on pageObjects 

And automatically create the constructor 

now to work on the JavascriptExpectedcondition 

To use WebDriverWait I need to create an ExpectedCondition 

~~~~~~~~    
    public class JavascriptExpectedCondition implements ExpectedCondition {
    private String theScript;
    public JavascriptExpectedCondition(String javaScriptScript) {
    this.theScript= javaScriptScript;
    }
    @Override
    public Boolean apply(WebDriver driver) {
    JavascriptExecutor js = (JavascriptExecutor)driver;
    return (Boolean)js.executeScript(theScript);
    }
    }
~~~~~~~~    

In WebDriver we can cast the driver to a JavascriptExecutor and that gives us an executeScript method. 

Now if I run that the tests will fail because I haven't been specific about the javascript statement returning a value, which it needs to do for our purposes. 

so add that code in the factory looks like this 
    
~~~~~~~~    
    public ExpectedCondition GWTTitleMatches(String subMenuText) {
    return new JavascriptExpectedCondition(
            "return document.title.match(\"" + subMenuText + "\");");
    }
~~~~~~~~    

Run this and the test still fails 

Now the problem we have is that title.match returns a List as it returns all the things that match this. And I want a boolean. So I'm going to amend the javaScript so it detects if the string is in the title somewhere and I'll use the indexOf operator for that. 

So amend the javascript in our ExpectedConditionFactory 
    
~~~~~~~~    
    public ExpectedCondition GWTTitleMatches(String subMenuText) {
    return new JavascriptExpectedCondition(
            "return document.title.indexOf(\"" + 
                    subMenuText + "\")!=-1;");
    }
~~~~~~~~    

Then move the WebDriverWait and ExpectedConditionFactory up into the constructor. We don't really need to do this, but it will make the code easier to read and means that we don't create these objects all the time for each subMenuItem click 

So clickSubMenuItem looks like this 
    
~~~~~~~~    
    private void clickSubMenuItem(String subMenuText) {
    String subMenuLocator = 
            "//div[@class=\"GALD-WOBF\" and .=\"" + 
                subMenuText + "\"]"; 
    driver.findElement(By.xpath(subMenuLocator)).click();
    wait.until(weCanSee.GWTTitleMatches(subMenuText));
    }
~~~~~~~~    

and the constructor like 
    
~~~~~~~~    
    private WebDriverWait wait;
    private ExpectedConditionFactory weCanSee;
    public SideMenu(WebDriver driver) {
    this.driver= driver;
    this.selenium = new WebDriverBackedSelenium(driver,"http://localhost/");
    widgets = new MenuHeading(selenium,"Widgets", "Checkbox");
    listsAndMenus = new MenuHeading(selenium,"Lists and Menus", "List Box");
    textInput = new MenuHeading(selenium,"Text Input", "Basic Text");
    tables = new MenuHeading(selenium,"Tables", "Grid");
    cellWidgets = new MenuHeading(selenium,"Cell Widgets", "Cell List");
    wait = new WebDriverWait(driver, 20); 
    weCanSee = new ExpectedConditionFactory();
    }
~~~~~~~~    
    

#  32 Appendix - Chapter 21 Walkthrough 

This is a longer walkthrough of the steps for Chapter 21 in case the thought processes around building the code in Chapter 21 were not clear to the reader. 

The problem in the sidemenu is that we are trying to click on something which is there, but isn't responsive to clicks yet. 

We can solve that by waiting with a Thread.sleep either after the openClose() method in MenuHeading.java or before we click on it on SideMenu.java clickSubMenuItem 

Or we could have a more clever wait in either of these places 

Having tried (and failed) to add robust checks in the SideMenu.java I am going to add checks in the MenuHeading so that it doesn't exist openClose() until the menu item has openClosed 

I am going to do this by monitoring the size of the menu and waiting until it stops moving. 

I basically want the code to look something like 
    
~~~~~~~~    
    public void openClose() {
    driver.findElement(
        By.xpath(
            "//div[.=\""+ this.menuHeading + "\"]/../div/img")).click();
    wait.until(weCanSee.elementStopsGrowing(parentDiv, driver));
    }
~~~~~~~~    

So I add that to my code and all I have to do is get it working! 

I'll create weCanSee in the MenuHeading.java constructor 
    
~~~~~~~~    
    weCanSee = new ExpectedConditionFactory();
~~~~~~~~    

Automatically create the field variable 

I'll add the wait in the MenuHeading.java constructor 
    
~~~~~~~~    
    wait = new WebDriverWait(driver,20);
~~~~~~~~    

Automatically create the field variable 

Then I'll identify the parentDiv for the control and I'll use relative xpath for this as it is nice and easy. 
    
~~~~~~~~    
    By parentDiv = By.xpath(
        "//div[.=\""+ this.menuHeading + "\"]/../../..");
~~~~~~~~    

Then I'll autocreate the elementStopsGrowing in the ExpectedConditionFactory 

amend it so that it is ExpectedCondition
    
~~~~~~~~    
    public ExpectedCondition elementStopsGrowing(By parentDiv,
    WebDriver driver) {
    // TODO Auto-generated method stub
    return null;
    }
~~~~~~~~    

giving me a nice clean openClose() method in MenuHeading.java 
    
~~~~~~~~    
    public void openClose() {
    driver.findElement(By.xpath(
        "//div[.=\""+ this.menuHeading + "\"]/../div/img")).click();
    By parentDiv = By.xpath("//div[.=\""+ 
        this.menuHeading + "\"]/../../..");
    wait.until(weCanSee.elementStopsGrowing(parentDiv, driver)); 
    }
~~~~~~~~    

Now all I have to do is implement the ExpectedCondition 

I'll do that by defining what it looks like in ExpectedConditionFactory 
    
~~~~~~~~    
public ExpectedCondition elementStopsGrowing(By parentDiv, WebDriver driver) {
return new ElementStopsGrowingCondition(parentDiv, driver);
}
~~~~~~~~    

And autocreating the class in PageObjects.wait 

And autocreating the constructor 
    
~~~~~~~~    
public class ElementStopsGrowingCondition implements ExpectedCondition {
public ElementStopsGrowingCondition(By parentDiv, WebDriver driver) {
// TODO Auto-generated constructor stub
}
@Override
public Boolean apply(WebDriver arg0) {
// TODO Auto-generated method stub
return null;
}
}
~~~~~~~~    
    

First amend the constructor in ElementStopsGrowingCondition to store the passed in parentDiv in a by object 

Then get the initial height of the parent div using RenderedWebElement 
    
~~~~~~~~    
public ElementStopsGrowingCondition(By parentDiv, WebDriver driver) {
this.by = parentDiv;
setHeightDetails(((RenderedWebElement)
    driver.findElement(parentDiv)).getSize().height);
}
~~~~~~~~    

autoCreate the by field 

Then auto create the setHeightDetails method 

In setHeightDetails we want to store the newHeight as the lastHeight so we can compare it and keep a count of the time it has been that height 

~~~~~~~~    
private void setHeightDetails(int newHeight) {
this.lastHeight = newHeight;
this.hasBeenThisHeightFor = 1;
}
~~~~~~~~    

autocreate the fields 

now amend the apply to get the current height 

  * then increment the hasbeenheightfor count if the height is the same 
  * if height is different then reset the height details 
  * if the height is stable then return true, otherwise return false to keep the wait going 
    
~~~~~~~~    
    public Boolean apply(WebDriver driver) {
    int currentHeight = ((RenderedWebElement)
        driver.findElement(by)).getSize().height;
    if( currentHeight == this.lastHeight){
    this.hasBeenThisHeightFor++;
    }else{
    setHeightDetails(currentHeight);
    }
    if(this.hasBeenThisHeightFor > 2){
    return true;
    }else{
    return false;
    }
    }
~~~~~~~~    
    

Also we don't need the waitForOpen or waitForClosed methods now so we can remove them from MenuHeading.java 